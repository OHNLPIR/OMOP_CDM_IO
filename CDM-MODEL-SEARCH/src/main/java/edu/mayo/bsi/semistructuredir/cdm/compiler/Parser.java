/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.mayo.bsi.semistructuredir.cdm.compiler;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.*;
import org.elasticsearch.index.query.QueryBuilder;

public class Parser implements ParserConstants {

  private static Parser instance = null;

  public static void main(String [] args) {
    try {
      if (args.length == 1) {
        ByteArrayInputStream stream = new ByteArrayInputStream(args[0].getBytes("UTF-8"));
        Topic s = new Parser(stream).Topic();
        stream.close();
      }
    } catch (TokenMgrError e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public static QueryBuilder generateQuery(String file) {
    try {
        File f = new File(file);
        FileInputStream s = new FileInputStream(file);
        Topic t;
        if (instance == null) {
            instance = new Parser(s);
        } else {
            Parser.ReInit(s);
        }
        t = instance.Topic();
        s.close();
        return t.toQuery();
    } catch (Exception e) {
        System.out.println(file);
        e.printStackTrace();
        return null;
    }
  }

  public static QueryBuilder generateQueryFromString(String string) {
    try {

      InputStream s = new ByteArrayInputStream(string.getBytes(StandardCharsets.UTF_8.name()));
      Topic t;
      if (instance == null) {
        instance = new Parser(s);
      } else {
        Parser.ReInit(s);
      }
      t = instance.Topic();
      s.close();
      return t.toQuery();
    } catch (Exception e) {
      System.out.println(string);
      e.printStackTrace();
      return null;
    }
  }

  public static String tostring(Token t) {
    return t.image.substring(1, t.image.length() - 1);
  }

// Parser
  static final public Topic Topic() throws ParseException {
    Clause c;
    Token docType;
    Topic ret = new Topic();
    label_1:
    while (true) {
      jj_consume_token(TYPE_DECL);
      docType = jj_consume_token(SIMPSTRLIT);
      label_2:
      while (true) {
        c = Clause();
                                                           if (c != null) {ret.add(docType.image, c);}
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REQUIRED:
        case FILTERED:
        case NEGATE:
        case SIMPSTRLIT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE_DECL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
                                                                                                              {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public Clause Clause() throws ParseException {
    FilterOption option = FilterOption.OPTIONAL;
    Token field;
    Token type = null;
    SearchContext parseable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRED:
    case FILTERED:
    case NEGATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REQUIRED:
        type = jj_consume_token(REQUIRED);
        break;
      case FILTERED:
        type = jj_consume_token(FILTERED);
        break;
      case NEGATE:
        type = jj_consume_token(NEGATE);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
                                                              if (type != null) {option = FilterOption.fromString(type.image);}
    field = jj_consume_token(SIMPSTRLIT);
    jj_consume_token(COLON);
    parseable = Parseable();
                                                                                                                                                                                           {if (true) return new Clause(option, field.image, parseable);}
    throw new Error("Missing return statement in function");
  }

  static final public SearchContext Parseable() throws ParseException {
    Token token;
    SearchContext ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RANGE_OPEN:
      ret = Range();
                     {if (true) return ret;}
      break;
    case ARR_OPEN:
      ret = Array();
                       {if (true) return ret;}
      break;
    case STRLIT:
      token = jj_consume_token(STRLIT);
                          {if (true) return new SimpleSearchContext(tostring(token));}
      break;
    case SIMPSTRLIT:
      token = jj_consume_token(SIMPSTRLIT);
                              {if (true) return new SimpleSearchContext(token.image);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public RangeSearchContext Range() throws ParseException {
    boolean includeLeft;
    boolean includeRight;
    SearchContext left = null;
    SearchContext right = null;
    Token r;
    r = jj_consume_token(RANGE_OPEN);
                        includeLeft = r.image.contains("[");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RANGE_OPEN:
    case ARR_OPEN:
    case STRLIT:
    case SIMPSTRLIT:
      left = Parseable();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(ARR_DELIMITER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RANGE_OPEN:
    case ARR_OPEN:
    case STRLIT:
    case SIMPSTRLIT:
      right = Parseable();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    r = jj_consume_token(RANGE_CLOSE);
                                                                                                                                                includeRight = r.image.contains("]"); {if (true) return new RangeSearchContext(includeLeft, includeRight, left, right);}
    throw new Error("Missing return statement in function");
  }

  static final public ArraySearchContext Array() throws ParseException {
                             Collection<SearchContext> contexts = new LinkedList<SearchContext>(); SearchContext parseable; Token min = null;
    jj_consume_token(ARR_OPEN);
    parseable = Parseable();
                                           contexts.add(parseable);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARR_DELIMITER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(ARR_DELIMITER);
      parseable = Parseable();
                                                                                                                 contexts.add(parseable);
    }
    jj_consume_token(RANGE_CLOSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CARAT:
      jj_consume_token(CARAT);
      min = jj_consume_token(SIMPSTRLIT);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                                                                                                                                                                                       {if (true) return new ArraySearchContext(contexts, min == null ? 0 : Integer.valueOf(min.image));}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf0000,0x4000,0x70000,0x70000,0x89800,0x89800,0x89800,0x400,0x200,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
